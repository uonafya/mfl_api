; ================================
; celery beat supervisor config
; ================================

; the name of your supervisord program
[program:mflcelerybeat]

; Set full path to celery program if using virtualenv
command=/opt/mfl_api_virtualenv/bin/celery -A config beat --loglevel=INFO --pidfile=/tmp/celerybeat-mfl.pid --schedule=/tmp/celerybeatmfl-schedule


; The directory to your Django project
directory=/opt/mfl_api

; If supervisord is run as the root user, switch users to this UNIX user account
; before doing any processing.
user={{mfl_celery_user}}

; Supervisor will start as many instances of this program as named by numprocs
numprocs=1

; Put process stdout output in this file
stdout_logfile=/var/log/celery/celery_beat.log

; Put process stderr output in this file
stderr_logfile=/var/log/celery/celery_beat.log

; If true, this program will start automatically when supervisord is started
autostart=true

; May be one of false, unexpected, or true. If false, the process will never
; be autorestarted. If unexpected, the process will be restart when the program
; exits with an exit code that is not one of the exit codes associated with this
; processâ€™ configuration (see exitcodes). If true, the process will be
; unconditionally restarted when it exits, without regard to its exit code.
autorestart=true

; The total number of seconds which the program needs to stay running after
; a startup to consider the start successful.
startsecs=10

; if your broker is supervised, set its priority higher
; so it starts first
priority=999
environment=DEBUG="{{django_debug}}",FRONTEND_URL="{{frontend_url}}",EMAIL_HOST="{{email_host}}",EMAIL_HOST_USER="{{email_host_user}}",EMAIL_HOST_PASSWORD="{{email_host_password}}",REALTIME_INDEX="{{realtime_index}}",HTTPS_ENABLED="{{ssl_on}}",AWS_ACCESS_KEY_ID="{{storage_account}}",AWS_SECRET_ACCESS_KEY="{{storage_key}}",AWS_STORAGE_BUCKET_NAME="{{storage_bucket}}",STORAGE_BACKEND="{{storage_backend}}",AWS_DB_BACKUP_BUCKET="{{aws_db_backup_bucket}}"
